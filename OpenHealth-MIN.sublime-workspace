{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ca",
				"categ_id"
			],
			[
				"pi",
				"picking_ids"
			],
			[
				"s",
				"stock_move_vis_ids"
			],
			[
				"lo",
				"location"
			],
			[
				"re",
				"readonly"
			],
			[
				"grou",
				"group"
			],
			[
				"doc",
				"doctor_id"
			],
			[
				"do",
				"doctor_id"
			],
			[
				"pri",
				"price_manual"
			],
			[
				"pr",
				"product_id"
			],
			[
				"Da",
				"datetime"
			],
			[
				"r",
				"roots"
			],
			[
				"loc",
				"location"
			],
			[
				"ka",
				"kardex"
			],
			[
				"p",
				"product"
			],
			[
				"produ",
				"product"
			],
			[
				"sot",
				"stock_move_ids"
			],
			[
				"us",
				"user_id"
			],
			[
				"user",
				"user_id"
			],
			[
				"order",
				"order_line_report"
			],
			[
				"create",
				"create_date"
			],
			[
				"R",
				"Report"
			],
			[
				"C",
				"Create"
			],
			[
				"x_or",
				"x_order_line_ids"
			],
			[
				"up",
				"update_order_report"
			],
			[
				"crea",
				"create_order_report"
			],
			[
				"remo",
				"remove_order_report"
			],
			[
				"or",
				"order"
			],
			[
				"un",
				"unlink"
			],
			[
				"price",
				"price_subtotal"
			],
			[
				"se",
				"self"
			],
			[
				"x",
				"x_payment_method"
			],
			[
				"py",
				"payment_method"
			],
			[
				"pa",
				"payment_method"
			],
			[
				"x_p",
				"x_partner_dni"
			],
			[
				"par",
				"partner_id"
			],
			[
				"dat",
				"date_order"
			],
			[
				"ti",
				"ticket_invoice"
			],
			[
				"sal",
				"saledoc"
			],
			[
				"op",
				"openhealth"
			],
			[
				"x_",
				"x_vip_inprog"
			],
			[
				"de",
				"default_code"
			],
			[
				"ad",
				"Advetisement"
			],
			[
				"cou",
				"counter"
			],
			[
				"la",
				"laser_co2"
			],
			[
				"Pre",
				"Precio"
			],
			[
				"Lo",
				"Localizado"
			],
			[
				"pro",
				"product_template"
			],
			[
				"prod",
				"product_product"
			],
			[
				"produc",
				"product_id"
			],
			[
				"targ",
				"target_line"
			],
			[
				"pat",
				"patient"
			],
			[
				"orde",
				"order_id"
			],
			[
				"nr",
				"nr_hands_i"
			],
			[
				"co",
				"comeback"
			],
			[
				"M",
				"Many2one"
			],
			[
				"laser",
				"laser_quick"
			],
			[
				"ne",
				"nex_zone"
			],
			[
				"f",
				"fields"
			],
			[
				"Pa",
				"Pathologies"
			],
			[
				"ser",
				"service"
			],
			[
				"pric",
				"pricelist_id"
			],
			[
				"to",
				"today_date"
			],
			[
				"eva",
				"evaluation_start_date"
			],
			[
				"app",
				"appointment"
			],
			[
				"appoin",
				"appointment_id"
			],
			[
				"com",
				"completed"
			],
			[
				"comp",
				"Completed"
			],
			[
				"F",
				"False"
			],
			[
				"Pro",
				"Procedure"
			],
			[
				"Fa",
				"Facturado"
			],
			[
				"en",
				"end_date"
			],
			[
				"trea",
				"treatment_closed"
			],
			[
				"x_m",
				"x_machine_req"
			],
			[
				"ta",
				"target_line"
			],
			[
				"cos",
				"cosmetology"
			],
			[
				"t",
				"treatment"
			],
			[
				"ac",
				"active"
			],
			[
				"def",
				"default_order"
			],
			[
				"in",
				"invisible"
			],
			[
				"jx",
				"jx_partner_id"
			],
			[
				"rec",
				"reception"
			],
			[
				"pricelis",
				"pricelist"
			],
			[
				"acc",
				"account_invoices"
			],
			[
				"st",
				"strip"
			],
			[
				"d",
				"draft"
			],
			[
				"gr",
				"group"
			],
			[
				"sa",
				"saledoc"
			],
			[
				"ret",
				"return"
			],
			[
				"ticket_",
				"ticket_receipt"
			],
			[
				"cat",
				"category_id"
			],
			[
				"stre",
				"street2"
			],
			[
				"phon",
				"phone_2"
			],
			[
				"rep",
				"replace"
			],
			[
				"report_",
				"report_ticket_receipt"
			],
			[
				"Re",
				"Regresar"
			],
			[
				"cu",
				"cuo_tot"
			],
			[
				"ame",
				"ame_tot"
			],
			[
				"cash",
				"cash_tot"
			],
			[
				"sale",
				"sale_note"
			],
			[
				"ord",
				"orders"
			],
			[
				"a",
				"amount_untaxed"
			],
			[
				"di",
				"directors"
			],
			[
				"part",
				"partner_id"
			],
			[
				"item",
				"item_ids"
			],
			[
				"oe",
				"oe_right"
			],
			[
				"ope",
				"openhealth"
			],
			[
				"on",
				"onchange_partner_id"
			],
			[
				"x_dat",
				"x_date_created"
			],
			[
				"x_da",
				"x_datetime_created"
			],
			[
				"con",
				"consultation"
			],
			[
				"group",
				"groups"
			],
			[
				"In",
				"Invoices"
			],
			[
				"card",
				"card_id"
			],
			[
				"patient",
				"patient_name"
			],
			[
				"u",
				"uom_id"
			],
			[
				"Inven",
				"Inventario"
			],
			[
				"Serv",
				"Servicios"
			],
			[
				"end",
				"appointment_end"
			]
		]
	},
	"buffers":
	[
		{
			"file": "__openerp__.py",
			"settings":
			{
				"buffer_size": 10233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n#\n# \t*** Treatment - OeHealth - new model \n# \n# Created: \t\t\t 26 Aug 2016\n# Last updated: \t 21 Feb 2017\n\n\nfrom openerp import models, fields, api\n\nfrom datetime import datetime\nfrom datetime import tzinfo\n\n#from . import jxvars\t - DEPRECATED\n\nfrom . import treatment_funcs\nfrom . import time_funcs\nfrom . import treatment_vars\n\n\n\n\nclass Treatment(models.Model):\n\n\t#_inherit = 'openextension.treatment'\n\n\t_inherit = 'openhealth.process'\t\n\t_name = 'openhealth.treatment'\n\n\n\t#_order = 'start_date desc'\n\t_order = 'write_date desc'\n\n\n\n\n\n# ----------------------------------------------------------- Reset Half ------------------------------------------------------\n\n\t# Reset Half\n\t@api.multi \n\tdef reset_half(self):\n\n\t\tprint 'jx'\n\t\tprint 'Reset Half'\n\n\n\t\t# Unlinks\n\t\tself.service_quick_ids.unlink()\n\t\tself.service_vip_ids.unlink()\n\t\tself.service_co2_ids.unlink()\n\t\tself.service_excilite_ids.unlink()\n\t\tself.service_ipl_ids.unlink()\n\t\tself.service_ndyag_ids.unlink()\n\t\tself.service_medical_ids.unlink()\t\t\n\t\tself.procedure_ids.unlink()\n\t\tself.session_ids.unlink()\n\t\tself.control_ids.unlink()\n\n\t\t#self.consultation_ids.unlink()\n\t\t#self.appointment_ids.unlink()\n\n\n\n\t\t# Alta \n\t\tself.treatment_closed = False\n\n\n\n\t\t# Orders \n\t\tfor order in self.order_ids:\n\t\t\t\n\t\t\tif order.x_family != 'consultation':\n\t\t\t\n\t\t\t\torder.remove_myself()\n\n\n\t\t# Numbers \n\t\t#self.nr_invoices_cons = 0 \n\t\tself.nr_invoices_pro = 0 \n\n\n\n\t# reset_half\n\n\n\n\n\n\n\n\n\n\t# Reset Quick \n\t@api.multi \n\tdef reset_quick(self):\n\n\n\t\t# Services \n\t\tself.service_quick_ids.unlink()\n\n\n\t\t# Orders \n\t\tfor order in self.order_ids:\n\n\t\t\tif order.x_machine_req == 'laser_quick': \n\t\t\t\torder.remove_myself()\n\n\n\n\n\t\n\t# Reset \n\t@api.multi \n\tdef reset(self):\n\n\t\t#print 'jx'\n\t\t#print 'Reset'\n\n\n\t\t# Unlinks\n\t\tself.service_quick_ids.unlink()\n\t\tself.service_vip_ids.unlink()\n\n\t\tself.service_co2_ids.unlink()\n\t\tself.service_excilite_ids.unlink()\n\t\tself.service_ipl_ids.unlink()\n\t\tself.service_ndyag_ids.unlink()\n\t\tself.service_medical_ids.unlink()\n\t\tself.consultation_ids.unlink()\n\t\tself.procedure_ids.unlink()\n\t\tself.session_ids.unlink()\n\t\tself.control_ids.unlink()\n\t\tself.appointment_ids.unlink()\n\n\n\t\t# Numbers \n\t\tself.nr_invoices_cons = 0 \n\t\tself.nr_invoices_pro = 0 \n\n\n\n\t\t# Orders \n\t\tfor order in self.order_ids:\n\t\t\torder.remove_myself()\n\n\n\n\t\t# Alta \n\t\tself.treatment_closed = False\n\n\n\n\t\t# Important\n\t\tself.patient.x_nothing = 'Nothing'\n\n\t# reset\n\n\n\n\n\n# ----------------------------------------------------------- Important ------------------------------------------------------\n\n\n\t# vip\n\tservice_vip_ids = fields.One2many(\n\t\t\t'openhealth.service.vip', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios vip\"\n\t\t\t)\n\n\n\n\n\n\n\n\n\n\t# quick\n\tservice_quick_ids = fields.One2many(\n\t\t\t'openhealth.service.quick', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios quick\"\n\t\t\t)\n\n\n\n\n\n\n\n\t# Quick Hands\n\tnr_quick_hands = fields.Integer(\n\n\t\t\tstring='Manos', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_hands', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_nr_quick_hands(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_hands = record.patient.x_nr_quick_hands\n\n\n\n\n\n\t# Quick Body Local\n\tnr_quick_body_local = fields.Integer(\n\n\t\t\tstring='Localizado Cuerpo', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_body_local', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_nr_quick_body_local(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_body_local = record.patient.x_nr_quick_body_local\n\n\n\n\n\n\n\t# Quick Face Local\n\tnr_quick_face_local = fields.Integer(\n\n\t\t\tstring='Localizado Rostro', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_face_local', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\t\n\tdef _compute_nr_quick_face_local(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_face_local = record.patient.x_nr_quick_face_local\n\n\n\n\n\n\n\n\n\n\n\t# Quick cheekbones\n\tnr_quick_cheekbones = fields.Integer(\n\n\t\t\tstring='PÃ³mulos', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_cheekbones', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_nr_quick_cheekbones(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_cheekbones = record.patient.x_nr_quick_cheekbones\n\n\n\n\n\t# Quick face_all\n\tnr_quick_face_all = fields.Integer(\n\n\t\t\tstring='Todo Rostro', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_face_all', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_nr_quick_face_all(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_face_all = record.patient.x_nr_quick_face_all\n\n\n\n\n\n\t# Quick face_all_hands\n\tnr_quick_face_all_hands = fields.Integer(\n\n\t\t\tstring='Todo Rostro Manos', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_face_all_hands', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_nr_quick_face_all_hands(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_face_all_hands = record.patient.x_nr_quick_face_all_hands\n\n\n\n\n\n\n\n\n\n\t# Quick face_all_neck\n\tnr_quick_face_all_neck = fields.Integer(\n\n\t\t\tstring='Todo Rostro Cuello', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_face_all_neck', \n\t\t)\n\n\t#@api.multi\n\t@api.depends('patient')\n\tdef _compute_nr_quick_face_all_neck(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_face_all_neck = record.patient.x_nr_quick_face_all_neck\n\n\n\n\n\n\t# Quick neck\n\tnr_quick_neck = fields.Integer(\n\n\t\t\tstring='Cuello', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_neck', \n\t\t)\n\n\t#@api.multi\n\t@api.depends('patient')\n\tdef _compute_nr_quick_neck(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_neck = record.patient.x_nr_quick_neck\n\n\n\n\n\n\t# Quick neck_hands\n\tnr_quick_neck_hands = fields.Integer(\n\n\t\t\tstring='Cuello Manos', \n\n\t\t\tdefault=11, \n\n\t\t\tcompute='_compute_nr_quick_neck_hands', \n\t\t)\n\n\t#@api.multi\n\t@api.depends('patient')\n\tdef _compute_nr_quick_neck_hands(self):\n\t\tfor record in self:\n\t\t\trecord.nr_quick_neck_hands = record.patient.x_nr_quick_neck_hands\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Closed \n\ttreatment_closed = fields.Boolean(\n\n\t\t\tstring=\"De Alta\",\n\t\t\n\t\t\tdefault=False,\n\t\t)\n\n\n\tend_date = fields.Date(\n\n\t\t\tstring=\"Fecha fin\", \n\t\t\n\t\t\t#default = fields.Date.today\n\t\t\tdefault = False, \n\n\t\t\t#compute='_compute_end_date', \n\t\t)\n\n\t#@api.multi\n\t#@api.depends('start_date', 'end_date')\n\n\t#def _compute_end_date(self):\n\t#\tfor record in self:\n\t#\t\tif not record.treatment_closed:\n\t#\t\t\trecord.end_date = False\n\t#\t\telse:\n\t#\t\t\trecord.end_date = record.today_date\n\n\n\n\n\t#@api.onchange('treatment_closed')\n\t#def _onchange_treatment_closed(self):\n\t\t\n\t#\tprint 'jx'\n\t#\tprint 'On Change Treatment Closed'\n\n\t#\tprint self.treatment_closed\n\t#\tprint self.today_date\n\t#\tprint self.end_date\n\n\t#\tif self.treatment_closed: \t\t\n\t\t\t\n\t\t\t#self.end_date = self.today_date\n\t\t\t#self.end_date = datetime.today().strftime('%Y-%m-%d')\n\t#\t\tself.end_date = datetime.today()\n\n\n\n\n\t\t\n\t\t#else: \n\t\t#\tself.end_date = False\n\n\n\n\n\n\n\n\n\n\n\n\t# Today \n\ttoday_date = fields.Date(\n\t\t\tstring=\"Fecha hoy\", \n\n\t\t\tdefault = fields.Date.today, \n\n\t\t\tcompute='_compute_today_date', \n\t\t)\n\n\t@api.multi\n\t#@api.depends('start_date')\n\n\tdef _compute_today_date(self):\n\t\tfor record in self:\n\n\t\t\t#record.today_date = datetime.today().strftime(\"%m/%d/%Y\")\n\t\t\trecord.today_date = datetime.today().strftime('%Y-%m-%d')\n\n\n\n\n\n\n\t# Duration \n\tduration = fields.Integer(\n\t\t\t#string=\"DÃ­as\", \n\t\t\tdefault = 0,\n\n\t\t\t#compute='_compute_duration', \n\t\t)\n\n\n\t@api.multi\n\t#@api.depends('start_date', 'end_date')\n\n\tdef _compute_duration(self):\n\n\t\tprint \n\t\tprint 'jx'\n\t\tprint 'Compute Duration'\n\n\t\tfor record in self:\n\n\t\t\tprint record.start_date\n\t\t\tprint record.today_date\n\n\t\t\tprint \n\n\t\t\tdate_format = \"%Y-%m-%d\"\n\n\t\t\ta = datetime.strptime(record.start_date, date_format)\n\n\t\t\tb = datetime.strptime(record.today_date, date_format)\n\t\t\t\n\n\t\t\t#if record.treatment_open:\n\t\t\t#if not record.treatment_closed:\n\t\t\t#\tif record.today_date != False: \n\t\t\t#\t\tb = datetime.strptime(record.today_date, date_format)\n\t\t\t\n\t\t\t#else:\n\n\n\t\t\t#if record.treatment_closed:\n\t\t\t#\tif record.end_date != False: \n\t\t\t#\t\tb = datetime.strptime(record.end_date, date_format)\n\t\t\t\n\n\n\t\t\tdelta = b - a\n\t\t\trecord.duration = delta.days + 1 \n\n\n\n\n\n\n\n\n\t# User \n\tuser_id = fields.Many2one(\n\t\t'res.users', \n\t\tstring='Salesperson', \n\t\tindex=True, \n\t\ttrack_visibility='onchange', \n\t\tdefault=lambda self: self.env.user, \n\t)\n\n\n\n# ----------------------------------------------------------- Canonical ------------------------------------------------------\n\n\t# Name \n\tname = fields.Char(\n\t\t\tstring=\"Tratamiento #\", \n\t\t\tcompute='_compute_name', \n\t\t\t)\n\n\tvspace = fields.Char(\n\t\t\t' ', \n\t\t\treadonly=True\n\t\t\t)\n\n\n\n\n\t# Open Myself\n\t@api.multi \n\tdef open_myself(self):\n\n\t\t#print \n\t\t#print 'Open Myself'\n\n\t\ttreatment_id = self.id  \n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.treatment',\n\t\t\t'res_id': treatment_id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t},\t\t\t\n\n\t\t\t'context':   {\n\n\t\t\t}\n\t\t}\n\t# open_myself\n\n\n\n\n\n\n\n\t# Partner \n\tpartner_id = fields.Many2one(\n\n\t\t\t'res.partner',\n\t\t\n\t\t\tstring = \"Cliente\", \t\n\n\t\t\t#required=True, \n\t\t\tcompute='_compute_partner_id', \n\t\t)\n\n\n\t#@api.multi\n\t@api.depends('patient')\n\tdef _compute_partner_id(self):\n\t\tfor record in self:\n\n\t\t\tpartner = record.env['res.partner'].search([\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('order','=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('name','like', record.patient.name),\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,)\n\n\t\t\trecord.partner_id = partner \n\t# _compute_partner_id\n\n\n\n\n\n\n\n\n\n\t# Family \n\tx_family = fields.Selection(\n\t\t\tstring = \"Tipo\", \t\n\t\t\t\n\t\t\t#selection = jxvars._family_list, \n\t\t\tselection = treatment_vars._family_list, \n\t\t)\n\n\n\n\n\n\n# ----------------------------------------------------------- Relational ------------------------------------------------------\n\t\n\t# Service \n\tservice_ids = fields.One2many(\n\t\t\t'openhealth.service', \t\n\t\t\t'treatment', \n\t\t\tstring=\"Servicios\"\n\t\t)\n\n\n\n\n\n\n\n\n\n\t# Co2\n\tservice_co2_ids = fields.One2many(\n\t\t\t'openhealth.service.co2', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios Co2\"\n\t\t\t)\n\n\t# Excilite\n\tservice_excilite_ids = fields.One2many(\n\t\t\t'openhealth.service.excilite', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios Excilite\"\n\t\t\t)\n\n\t# Ipl\n\tservice_ipl_ids = fields.One2many(\n\t\t\t'openhealth.service.ipl', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios ipl\"\n\t\t\t)\n\n\n\t# Ndyag\n\tservice_ndyag_ids = fields.One2many(\n\t\t\t'openhealth.service.ndyag', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios ndyag\"\n\t\t\t)\n\n\t# Medical\n\tservice_medical_ids = fields.One2many(\n\t\t\t'openhealth.service.medical', \n\t\t\t'treatment', \n\t\t\tstring=\"Servicios medical\"\n\t\t\t)\n\n\n\n\n\n\n\n\n\t# Consultation progress\n\tconsultation_progress = fields.Float(\n\n\t\t\tdefault = 0, \n\t\t\tcompute=\"_compute_progress\",\n\t\t)\n\n\t@api.multi\n\t#@api.depends('consultation_ids')\n\n\tdef _compute_progress(self):\n\t\tfor record in self:\n\n\t\t\tfor con in record.consultation_ids:\n\t\t\t\trecord.consultation_progress = con.progress\n\n\n\n\n\t# State \n\tstate = fields.Selection(\n\n\t\t\t#selection = _state_list, \n\t\t\tselection = treatment_vars._state_list, \n\t\t\n\t\t\tstring='Estado', \t\t\t\n\n\t\t\t#default = False, \n\t\t\tdefault = 'empty', \n\n\t\t\tcompute=\"_compute_state\",\n\t\t)\n\n\n\n\t@api.multi\n\t#@api.depends('consultation_ids')\n\n\tdef _compute_state(self):\n\t\tfor record in self:\n\n\n\t\t\t#state = False\n\t\t\tstate = 'empty'\n\n\n\n\t\t\tif record.nr_appointments > 0:\n\t\t\t\tstate = 'appointment'\n\n\n\t\t\t#if record.nr_budgets_cons > 0:\n\t\t\t#\tstate = 'budget_consultation'\n\n\n\t\t\tif record.nr_invoices_cons > 0:\n\t\t\t\tstate = 'invoice_consultation'\n\n\n\t\t\t#if record.nr_consultations > 0:\n\t\t\tif record.consultation_progress == 100:\n\t\t\t\tstate = 'consultation'\n\n\n\t\t\tif record.nr_services > 0:\n\t\t\t\tstate = 'service'\n\n\n\t\t\t#if record.nr_budgets_pro > 0:\n\t\t\t#\tstate = 'budget_procedure'\n\n\n\t\t\tif record.nr_invoices_pro > 0:\n\t\t\t\tstate = 'invoice_procedure'\n\n\n\t\t\tif record.nr_procedures > 0:\n\t\t\t\tstate = 'procedure'\n\n\n\t\t\tif record.nr_sessions > 0:\n\t\t\t\tstate = 'sessions'\n\n\n\t\t\tif record.nr_controls > 0:\n\t\t\t\tstate = 'controls'\n\n\n\n\n\t\t\tif record.treatment_closed:\n\t\t\t\tstate = 'done'\n\n\n\n\n\t\t\trecord.state = state\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Number ofs ------------------------------------------------------\n\n\n\n\n\t# Number of appointments \n\tnr_appointments = fields.Integer(\n\t\t\tstring=\"Citas\",\n\t\t\tcompute=\"_compute_nr_appointments\",\n\t)\n\t@api.multi\n\tdef _compute_nr_appointments(self):\n\t\tfor record in self:\n\n\t\t\trecord.nr_appointments=self.env['oeh.medical.appointment'].search_count([\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_target','=', 'doctor'),\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\n\t# Number of Services  \n\tnr_services = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services(self):\n\t\tfor record in self:\n\n\n\t\t\tquick =\t\tself.env['openhealth.service.quick'].search_count([('treatment','=', record.id),]) \n\n\t\t\tvip =\t\tself.env['openhealth.service.vip'].search_count([('treatment','=', record.id),]) \n\n\n\n\t\t\tco2 =\t\tself.env['openhealth.service.co2'].search_count([('treatment','=', record.id),]) \n\t\t\texc = \t\tself.env['openhealth.service.excilite'].search_count([('treatment','=', record.id),]) \n\t\t\tipl = \t\tself.env['openhealth.service.ipl'].search_count([('treatment','=', record.id),]) \n\t\t\tndyag = \tself.env['openhealth.service.ndyag'].search_count([('treatment','=', record.id),]) \n\t\t\tmedical =\tself.env['openhealth.service.medical'].search_count([('treatment','=', record.id),]) \n\n\n\n\t\t\t#record.nr_services = co2 + exc + ipl + ndyag + medical\n\t\t\t#record.nr_services = quick + co2 + exc + ipl + ndyag + medical\n\t\t\trecord.nr_services = vip + quick + co2 + exc + ipl + ndyag + medical\n\n\n\n\n\n\n\n\t# vip\n\tnr_services_vip = fields.Integer(\n\t\t\tstring=\"Servicios vip\",\n\t\t\tcompute=\"_compute_nr_services_vip\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_vip(self):\n\t\tfor record in self:\n\n\t\t\tservices =\t\tself.env['openhealth.service.vip'].search_count([('treatment','=', record.id),]) \n\t\t\t\n\t\t\trecord.nr_services_vip = services \n\n\n\n\n\n\n\n\n\n\n\n\t# Quick\n\tnr_services_quick = fields.Integer(\n\t\t\tstring=\"Servicios Quick\",\n\t\t\tcompute=\"_compute_nr_services_quick\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_quick(self):\n\t\tfor record in self:\n\n\t\t\tservices =\t\tself.env['openhealth.service.quick'].search_count([('treatment','=', record.id),]) \n\t\t\t\n\t\t\trecord.nr_services_quick = services \n\n\n\n\n\n\n\n\t# Co2\n\tnr_services_co2 = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services_co2\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_co2(self):\n\t\tfor record in self:\n\n\t\t\tservices =\t\tself.env['openhealth.service.co2'].search_count([('treatment','=', record.id),]) \n\t\t\t\n\t\t\trecord.nr_services_co2 = services \n\n\n\n\n\t# excilite\n\tnr_services_excilite = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services_excilite\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_excilite(self):\n\t\tfor record in self:\n\t\t\tservices = \t\tself.env['openhealth.service.excilite'].search_count([('treatment','=', record.id),]) \n\t\t\trecord.nr_services_excilite = services \n\n\n\t# ipl\n\tnr_services_ipl = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services_ipl\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_ipl(self):\n\t\tfor record in self:\n\t\t\tservices = \t\tself.env['openhealth.service.ipl'].search_count([('treatment','=', record.id),]) \n\t\t\trecord.nr_services_ipl = services \n\n\n\n\t# ndyag\n\tnr_services_ndyag = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services_ndyag\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_ndyag(self):\n\t\tfor record in self:\n\t\t\tservices = \t\tself.env['openhealth.service.ndyag'].search_count([('treatment','=', record.id),]) \n\t\t\trecord.nr_services_ndyag = services \n\n\n\t# medical\n\tnr_services_medical = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\t\t\tcompute=\"_compute_nr_services_medical\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_medical(self):\n\t\tfor record in self:\n\t\t\tservices = \t\tself.env['openhealth.service.medical'].search_count([('treatment','=', record.id),]) \n\t\t\trecord.nr_services_medical = services \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Number of budgets - Consultations \t\t\t# DEP ? \n\t#nr_budgets_cons = fields.Integer(\n\t#\t\tstring=\"Presupuestos Consultas\",\n\t#\t\tcompute=\"_compute_nr_budgets_cons\",\n\t#)\n\t#@api.multi\n\t#def _compute_nr_budgets_cons(self):\n\t#\tfor record in self:\n\t#\t\trecord.nr_budgets_cons=self.env['sale.order'].search_count([\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family','=', 'consultation'),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state','=', 'draft'),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\t# Number of budgets - Proc   \t\t\t\t\t# DEP ?  \n\t#nr_budgets_pro = fields.Integer(\n\t#\t\tstring=\"Presupuestos - Pro\",\n\t#\t\tcompute=\"_compute_nr_budgets_pro\",\n\t#)\n\t#@api.multi\n\t#def _compute_nr_budgets_pro(self):\n\t#\tfor record in self:\n\t#\t\trecord.nr_budgets_pro=self.env['sale.order'].search_count([\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family','=', 'procedure'),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state','=', 'draft'),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Number of invoices - Consultations\n\tnr_invoices_cons = fields.Integer(\n\t\t\tstring=\"Facturas Consultas\",\n\t\t\tcompute=\"_compute_nr_invoices_cons\",\n\t)\n\t@api.multi\n\tdef _compute_nr_invoices_cons(self):\n\t\tfor record in self:\n\n\n\t\t\trecord.nr_invoices_cons=self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family','=', 'consultation'),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state','=', 'sale'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\n\n\n\n\n\n\n\n\t# Number of invoices - Proc\n\tnr_invoices_pro = fields.Integer(\n\t\t\tstring=\"Facturas\",\n\t\t\tcompute=\"_compute_nr_invoices_pro\",\n\t)\n\t@api.multi\n\tdef _compute_nr_invoices_pro(self):\n\t\tfor record in self:\n\n\n\t\t\trecord.nr_invoices_pro=self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family','=', 'procedure'),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state','=', 'sale'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\n\n\t# Number of procedures \n\tnr_procedures = fields.Integer(\n\t\t\tstring=\"Procedimientos\",\n\t\t\tcompute=\"_compute_nr_procedures\",\n\t)\n\t@api.multi\n\tdef _compute_nr_procedures(self):\n\t\tfor record in self:\n\n\t\t\trecord.nr_procedures=self.env['openhealth.procedure'].search_count([\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\t# Number of sessions \n\tnr_sessions = fields.Integer(\n\t\t\tstring=\"Sesiones\",\n\t\t\tcompute=\"_compute_nr_sessions\",\n\t)\n\t@api.multi\n\tdef _compute_nr_sessions(self):\n\t\tfor record in self:\n\n\t\t\t#record.nr_sessions=self.env['openhealth.session'].search_count([\n\t\t\trecord.nr_sessions=self.env['openhealth.session.med'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]) \n\n\n\n\n\t# Number of controls \n\tnr_controls = fields.Integer(\n\t\t\tstring=\"Controles\",\n\t\t\tcompute=\"_compute_nr_controls\",\n\t)\n\t@api.multi\n\tdef _compute_nr_controls(self):\n\t\tfor record in self:\n\n\t\t\trecord.nr_controls=0\n\t\t\trecord.nr_controls=self.env['openhealth.control'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', record.id),\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc', limit=1)\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Relational ------------------------------------------------------\n\n\n\t# Reservations \n\treservation_ids = fields.One2many(\n\n\t\t\t'oeh.medical.appointment', \n\n\t\t\t'treatment', \n\n\t\t\tstring = \"Reserva de sala\", \n\n\t\t\tdomain = [\n\n\t\t\t\t\t\t('x_machine', '!=', 'false'),\n\t\t\t\t\t\t\n\t\t\t\t\t\t#('x_target', '!=', 'doctor'),\n\t\t\t\t\t\t#('x_target', 'in', 'doctor'),\n\t\t\t\t\t\t#('treatment', 'like', 'TR000073'),\n\t\t\t\t\t],\n\t\t\t)\n\n\n\n\n\n\t# Appointments \n\tappointment_ids = fields.One2many(\n\n\n\t\t\t'oeh.medical.appointment', \n\t\t\t#'openhealth.appointment', \n\t\t\n\n\t\t\t'treatment', \n\t\t\tstring = \"Citas\", \n\t\t\tdomain = [\n\t\t\t\t\t\t('x_target', '=', 'doctor'),\n\t\t\t\t\t],\n\t\t\t)\n\n\n\n\n\t# Number of appointments\n\t\n\tnr_appointments = fields.Integer(\n\t\t\t\tstring=\"Citas\",\n\t\t\t\tcompute=\"_compute_nr_appointments\",\n\t)\n\n\t@api.multi\n\t\n\tdef _compute_nr_appointments(self):\n\t\tfor record in self:\n\n\t\t\tctr = 0 \n\t\t\t\n\t\t\tfor c in record.appointment_ids:\n\t\t\t\tctr = ctr + 1\t\t\n\n\t\t\trecord.nr_appointments = ctr\n\n\n\n\n\n\n\t# Evaluation  \n\n\t#evaluation_ids = fields.One2many(\n\t#\t\t'oeh.medical.evaluation', \n\t#\t\t'treatment_id', \n\t#\t\tstring = \"Evaluaciones\", \n\t#\t\t)\n\n\t#nr_evaluations = fields.Integer(\n\t#\t\tcompute='_compute_nr_evaluations', \n\t#\t\tstring='Nr. evaluaciones', \n\t#\t\tdefault = 0, \n\t#\t\t)\n\n\t#@api.depends('evaluation_ids')\n\n\t#def _compute_nr_evaluations(self):\n\t#\tfor record in self:\n\t#\t\tsub_total = 0 \n\t#\t\tfor se in record.evaluation_ids:   \n\t#\t\t\tsub_total = sub_total + 1  \n\t#\t\trecord.nr_evaluations= sub_total  \n\n\n\n\n\n\n\n\n\n\n\n\t# Number of consultations \n\tnr_consultations = fields.Integer(\n\t\t\tstring=\"Nr Consultas\",\n\t\t\tcompute=\"_compute_nr_consultations\",\n\t)\n\t#@api.multi\n\t@api.depends('consultation_ids')\n\tdef _compute_nr_consultations(self):\n\t\tfor record in self:\n\t\t\tctr = 0 \n\t\t\tfor c in record.consultation_ids:\n\t\t\t\tctr = ctr + 1\n\t\t\trecord.nr_consultations = ctr\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t# Number of orders \n\tnr_orders = fields.Integer(\n\t\t\tstring=\"Presupuestos\",\n\t\t\tcompute=\"_compute_nr_orders\",\n\t)\n\t@api.multi\n\tdef _compute_nr_orders(self):\n\t\tfor record in self:\n\t\t\tctr = 0 \t\t\t\n\t\t\tfor c in record.consultation_ids:\n\t\t\t\tfor o in c.order:\n\t\t\t\t\tctr = ctr + 1\n\t\t\trecord.nr_orders = ctr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Relational ------------------------------------------------------\n\n\trecommendation_ids = fields.One2many(\n\t\t\t'openhealth.recommendation', \n\t\t\t'treatment', \n\t\t\tstring = \"Recomendaciones\", \n\t\t\t)\n\n\n\n\tconsultation_ids = fields.One2many(\n\t\t\t#'oeh.medical.evaluation', \n\t\t\t'openhealth.consultation', \n\t\t\t'treatment', \n\t\t\tstring = \"Consultas\", \n\t\t\t)\n\n\n\n\tprocedure_ids = fields.One2many(\n\t\t\t#'oeh.medical.evaluation', \n\t\t\t'openhealth.procedure', \n\t\t\t'treatment', \n\t\t\tstring = \"Procedimientos\", \n\t\t\t)\n\n\n\n\tsession_ids = fields.One2many(\n\t\t\t#'openhealth.session', \n\t\t\t'openhealth.session.med', \n\t\t\t'treatment', \n\t\t\tstring = \"Sesiones\", \n\t\t\t)\n\n\n\n\tcontrol_ids = fields.One2many(\n\t\t\t'openhealth.control', \n\t\t\t'treatment', \n\t\t\tstring = \"Controles\", \n\t\t\t)\n\n\n\n\t# Order \n\t#order = fields.One2many(\n\t#\t\t'sale.order',\n\t#\t\t'treatment', \n\t#\t\t)\n\n\n\n\t# Quotations \n\t#quotation_ids = fields.One2many(\n\t#\t\t'sale.order',\t\t\t \n\t#\t\t'treatment', \t\t\t\n\t#\t\tstring=\"Presupuestos\",\n\t#\t\tdomain = [\n\t\t\t\t\t\t#('state', '=', 'pre-draft'),\n\t\t\t\t\t\t#('state', 'in', ['draft', 'sent', 'sale', 'done'])\n\t\t\t\t\t\t#('x_family', '=', 'private'),\n\t#\t\t\t\t],\n\t#\t\t)\n\n\t# Sales \n\t#sale_ids = fields.One2many(\n\t#\t\t'sale.order',\t\t\t \n\t#\t\t'treatment', \n\t#\t\tstring=\"Ventas\",\n\t#\t\tdomain = [\n\t\t\t\t\t\t#('state', '=', 'sale'),\n\t#\t\t\t\t\t('state', 'in', ['sale', 'done'])\n\t#\t\t\t\t],\n\t#\t\t)\n\n\n\n\t# Deprecated ???\n\t#order_pro_ids = fields.One2many(\n\t#\t\t'sale.order',\t\t\t \n\t#\t\t'treatment', \n\t#\t\tstring=\"Presupuestos\",\n\t#\t\tdomain = [\n\t#\t\t\t\t\t('x_family', '=', 'procedure'),\n\t#\t\t\t\t],\n\t#\t\t)\n\n\n\nstates=READONLY_STATES,\n\n\n\t# orders \n\torder_ids = fields.One2many(\n\t\t\t'sale.order',\t\t\t \n\t\t\t'treatment', \n\t\t\tstring=\"Presupuestos\",\n\t\t\t\n\n\t\t\t#states={'sale': [('readonly', True)], 'cancel': [('readonly', True)]}, \n\n\n\t\t\t#domain = [\n\t\t\t\t\t\t#('state', '=', 'order'),\n\t\t\t\t\t\t#('state', 'in', ['order', 'done'])\n\t\t\t#\t\t],\n\t\t)\n\n\n\n\n\n\n\n\n\t\n# ----------------------------------------------------------- Indexes ------------------------------------------------------\n\t\n\n\t\t\t\n\n\n\n\n\n\n\n\n\n\t@api.multi\n\tdef update_appointment(self, appointment_id, procedure_id, x_type):\n\n\t\t#print \n\t\t#print 'Update Appointment'\n\n\n\t\t#ret = treatment_funcs.create_procedure_go(self)\n\t\tret = treatment_funcs.update_appointment_go(self, appointment_id, procedure_id, x_type)\n\n\n\t\t#print ret \n\t\t#print \n\n\n\n\n\n\t# Clean procedures\n\t@api.multi\n\tdef clean_procedures(self):\n\t\tself.procedure_ids.unlink()\n\n\n\n\t\t\t\n\n\n\n\n\n\t@api.multi\n\t#@api.depends('start_date')\n\n\tdef _compute_name(self):\n\t\tfor record in self:\n\t\t\t#record.name = record.patient.name + '-' + record.physician.name + '-' + record.start_date \n\t\t\t#record.name = 'TR-' + record.start_date \n\t\t\t#record.name = record.patient.name\n\t\t\trecord.name = 'TR0000' + str(record.id) \n\n\n\n\n\t#name = fields.Char(\n\t\t\t#string=\"Treatment #\", \n\t#\t\tstring=\"Tratamiento #\", \n\t#\t\trequired=True, \n\t#\t\tcompute='_compute_name', \n\t#\t\tdefault='.'\n\t#\t\t)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Number of services\n\t#nr_services = fields.Integer(\n\t#\t\tcompute='_compute_nr_services', \n\t\t\t#string='Number of services', \n\t#\t\tstring='Nr servicios', \n\t#\t\tdefault = 0, \n\t#\t\t)\n\n\n\n\t#@api.depends('service_ids')\n\t#def _compute_nr_services(self):\n\t#\tfor record in self:\n\t#\t\tsub_total = 0 \n\t#\t\tfor se in record.service_ids:   \n\t\t\t\t#print se.price\n\t#\t\t\tsub_total = sub_total + 1  \n\t#\t\trecord.nr_services= sub_total  \n\t\t\t#record.nr_services = record.service_ids.count \n\n\n\n\n\n\n\t#@api.multi\n\t#@api.depends('service_ids')\n\n\t#def _compute_price_total(self):\n\t#\tfor record in self:\n\t#\t\tsub_total = 0.0 \n\t#\t\tfor se in record.service_ids:   \n\t#\t\t\t#print se.price\n\t#\t\t\tsub_total = sub_total + se.price \n\t#\t\trecord.price_total = sub_total  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# BUTTONS with Context\n\t# ----------------------\n\n\t# Button - Evaluation  \n\t# ----------------------\n\t@api.multi\n\tdef open_evaluation_current(self):  \n\n\t\tpatient_id = self.patient.id\n\t\tdoctor_id = self.physician.id\n\t\ttreatment_id = self.id \n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Evaluation Current',\n\n\t\t\t# Window action \n\t\t\t'res_model': 'oeh.medical.evaluation',\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\n\t\t\t#'target': 'new',\n\t\t\t'target': 'current',\n\n\t\t\t'context':   {\n\t\t\t\t'search_default_treatment': treatment_id,\n\n\t\t\t\t'default_patient': patient_id,\n\t\t\t\t'default_doctor': doctor_id,\n\t\t\t\t'default_treatment_id': treatment_id,\n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tnr_consultations = fields.Integer(\n\t\t\tcompute='_compute_nr_consultations', \n\t\t\tdefault = 0, \n\t\t\t)\n\n\t@api.depends('consultation_ids')\n\n\tdef _compute_nr_consultations(self):\n\t\tfor record in self:\n\t\t\tsub_total = 0 \n\t\t\tfor co in record.consultation_ids:   \n\t\t\t\tsub_total = sub_total + 1  \n\t\t\trecord.nr_consultations = sub_total  \n\n\n\n\n\n\n\n\t# Procedures \n\t# ------------\n\n\n\tnr_procedures = fields.Integer(\n\t\t\tcompute='_compute_nr_procedures', \n\t\t\tdefault = 0, \n\t\t\t)\n\n\t@api.depends('procedure_ids')\n\n\tdef _compute_nr_procedures(self):\n\t\tfor record in self:\n\t\t\tsub_total = 0 \n\t\t\tfor co in record.procedure_ids:   \n\t\t\t\tsub_total = sub_total + 1  \n\t\t\trecord.nr_procedures = sub_total  \n\n\n\n\n\n\t# Controls \n\t# ---------\n\t#control_ids = fields.One2many(\n\t\t\t#'oeh.medical.evaluation', \n\t#\t\t'openhealth.control', \n\n\t#\t\t'treatment_id', \n\t#\t\tstring = \"Controles\", \n\t#\t\t)\n\n\n\n\n\n\n\n\n\t# ----------------------------------------------------- Open Appointment ------------------------------------------------------------\n\n\t# Open Appointment\n\t# -----------------\n\t@api.multi\n\tdef open_appointment(self):  \n\n\t\t#print \n\t\t#print 'open appointment'\n\n\n\t\towner_id = self.id \n\t\t#owner_type = self.owner_type\n\n\n\t\tpatient_id = self.patient.id\n\n\n\t\tdoctor_id = self.physician.id\n\t\t#therapist_id = self.therapist.id\n\n\n\t\t\n\t\t#treatment_id = self.treatment.id \n\t\t#cosmetology_id = self.cosmetology.id \n\n\n\n\t\tGMT = time_funcs.Zone(0,False,'GMT')\n\t\tappointment_date = datetime.now(GMT).strftime(\"%Y-%m-%d %H:%M:%S\")\n\t\t#appointment_date = '2016-12-23'\n\n\n\t\treturn {\n\t\t\t\t'type': 'ir.actions.act_window',\n\n\t\t\t\t'name': ' New Appointment', \n\t\t\t\t\n\t\t\t\t'view_type': 'form',\n\t\t\t\t\n\t\t\t\t#'view_mode': 'form',\t\t\t\n\t\t\t\t'view_mode': 'calendar',\t\t\t\n\t\t\t\t\n\t\t\t\t'target': 'current',\n\t\t\t\t\n\n\t\t\t\t'res_model': 'oeh.medical.appointment',\t\t\t\t\n\t\t\t\t\n\t\t\t\t'flags': \t{\n\t\t\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t\t\t},\n\n\n\t\t\t\t'context': {\n\t\t\t\t\t\t\t#'default_consultation': owner_id,\t\t\t\t\t\n\t\t\t\t\t\t\t'default_treatment': owner_id,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t'default_patient': patient_id,\n\t\t\t\t\t\t\t'default_doctor': doctor_id,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#'default_x_type': owner_type,\n\n\t\t\t\t\t\t\t'default_appointment_date': appointment_date,\n\t\t\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\n\n\t# ----------------------------------------------------- Create Consultation ------------------------------------------------------------\n\n\t# Consultation - NEW\n\t# --------------------\n\n#jx\n\t@api.multi\n\t#def open_consultation_current(self):  \n\tdef create_consultation(self):  \n\n\n\t\tprint 'jx'\n\t\tprint 'Create Consultation'\n\n\n\t\tpatient_id = self.patient.id\n\t\ttreatment_id = self.id \n\t\tchief_complaint = self.chief_complaint\n\n\n\n\n\n\t\t# Doctor \n\t\tdoctor_id = treatment_funcs.get_actual_doctor(self)\n\n\t\tprint doctor_id\n\n\t\tif doctor_id == False: \n\t\t\tdoctor_id = self.physician.id\n\n\t\tprint doctor_id\n\n\n\n\n\n\t\t# Date \n\t\tGMT = time_funcs.Zone(0,False,'GMT')\n\t\t#print 'GMT: ', GMT\n\t\tevaluation_start_date = datetime.now(GMT).strftime(\"%Y-%m-%d %H:%M:%S\")\n\t\t#print 'evaluation_start_date: ', evaluation_start_date \n\n\n\n\t\t# Apointment \n\t\tappointment = self.env['oeh.medical.appointment'].search([ \t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('patient', 'like', self.patient.name),\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('doctor', 'like', self.physician.name), \t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('x_type', 'like', 'consultation'), \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient', '=', self.patient.name),\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('doctor', '=', self.physician.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_type', '=', 'consultation'),\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder='appointment_date desc', limit=1)\n\t\t#print 'appointment: ', appointment\n\t\tappointment_id = appointment.id\n\n\n\n\t\t# Search  \n\t\tconsultation = self.env['openhealth.consultation'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment','=', self.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,)\n\n\t\t# Create if it does not exist \n\t\tif consultation.name == False:\n\t\t\t#print 'create consultation'\n\n\n\n\n\t\t\t# Change App state \n\t\t\t##appointment.state = 'completed'\n\t\t\tappointment.state = 'Scheduled'\n\n\n\n\n\t\t\t# Consultation \n\t\t\tconsultation = self.env['openhealth.consultation'].create(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'patient': patient_id,\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'treatment': treatment_id,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'evaluation_start_date': evaluation_start_date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'chief_complaint': chief_complaint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'appointment': appointment_id,\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'doctor': doctor_id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\tconsultation_id = consultation.id \n\t\t\t#print 'consultation: ', consultation\n\t\t\t#print 'consultation_id', consultation_id\n\n\n\t\t\t# Update\n\t\t\trec_set = self.env['oeh.medical.appointment'].browse([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tappointment_id\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t#print 'rec_set: ', rec_set\n\n\t\t\tret = rec_set.write({\n\t\t\t\t\t\t\t\t\t'consultation': consultation_id,\n\t\t\t\t\t\t\t\t})\n\n\t\t\t#print ret \n\t\t\t#print appointment\n\t\t\t#print appointment.consultation\n\t\t\t#print appointment.consultation.id\n\n\n\n\t\t#print \n\t\tconsultation_id = consultation.id \n\t\t\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.consultation',\n\t\t\t'res_id': consultation_id,\n\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\n\t\t\t'target': 'current',\n\n\t\t\t#'view_id': view_id,\n\t\t\t#'view_id': 'oeh_medical_evaluation_view',\n\t\t\t#'view_id': 'oehealth.oeh_medical_evaluation_view',\n\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t#'form': {'action_buttons': True, }\n\t\t\t\t\t},\t\t\t\n\n\n\n\t\t\t'context':   {\n\n\t\t\t\t'search_default_treatment': treatment_id,\n\n\t\t\t\t'default_patient': patient_id,\n\t\t\t\t'default_doctor': doctor_id,\n\t\t\t\t'default_treatment': treatment_id,\t\t\n\n\t\t\t\t'default_evaluation_start_date': evaluation_start_date,\n\t\t\t\t'default_chief_complaint': chief_complaint,\n\t\t\t\t'default_appointment': appointment_id,\n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Buttons ------------------------------------------------------\n\n\t# Treatment - EDIT \n\t# --------------------\n\n\t@api.multi\n\tdef open_line_current(self):  \n\n\t\ttreatment_id = self.id \n\n\t\treturn {\n\t\t\t\t'type': 'ir.actions.act_window',\n\t\t\t\t'name': ' Edit Treatment Current', \n\t\t\t\t'view_type': 'form',\n\t\t\t\t'view_mode': 'form',\n\n\t\t\t\t'res_model': self._name,\n\t\t\t\t#'res_model': 'openhealth.consultation',\n\n\t\t\t\t'res_id': treatment_id,\n\n\t\t\t\t'target': 'current',\n\t\t\t\t#'target': 'inline'.\n\n\t\t\t\t'flags': {\n\t\t\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t\t},\n\n\t\t\t\t'context': {\n\t\t\t\t\t\t}\n\t\t}\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Invoice  ------------------------------------------------------\n\n\t#@api.multi \n\t#def create_invoice(self):\t\t\t# Do Nothing  \n\t\t#print 'jx'\n\t\t#print 'Create Invoice'\n\n\t# create_invoice \n\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Service  ------------------------------------------------------\n\n\t@api.multi\n\tdef create_service(self):\n\t\ttreatment_id = self.id\n\n\t\t#print 'jx'\n\t\t#print 'Create Service'\n\t\t#consultation = self.env['openhealth.consultation'].search([('treatment','=', self.id)]) \n\t\t#consultation_id = consultation.id\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\n\n\t\t\t# Window action \n\t\t\t#'res_model': 'openhealth.consultation',\n\t\t\t#'res_id': consultation_id,\n\n\t\t\t#'res_model': 'openhealth.service',\n\t\t\t'res_model': 'openhealth.recommendation',\n\n\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\n\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\t\t\t'flags': {\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t#'form': {'action_buttons': True, }\n\t\t\t\t\t'form': {'action_buttons': False, }\n\t\t\t\t\t},\t\t\t\n\n\n\t\t\t'context':   {\n\t\t\t\t\t\t\t#'default_consultation': consultation_id,\n\n\t\t\t\t\t\t\t'default_treatment': treatment_id,\t\t\t\t\t\n\t\t\t\t\t}\n\t\t}\n\n\n\n\n\t# create_service\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Order Pro  ------------------------------------------------------\n\t@api.multi \n\tdef create_order_con(self):\n\n\t\ttarget = 'consultation'\n\n\n\t\torder = self.create_order(target)\t\t\n\t\t#print order \n\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Order Current',\n\n\t\t\t# Window action \n\t\t\t'res_model': 'sale.order',\n\n\n\t\t\t'res_id': order.id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\t\t\t\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t},\t\t\t\n\n\n\t\t\t'context': {}\n\t\t}\n\n\t# create_order_con\n\n\n\n\n# ----------------------------------------------------------- Button - Create Order Pro  ------------------------------------------------------\n\t@api.multi \n\tdef create_order_pro(self):\n\n\t\ttarget = 'procedure'\n\n\n\t\torder = self.create_order(target)\t\t\n\t\t#print order \n\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Order Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'sale.order',\n\t\t\t'res_id': order.id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t},\t\t\t\n\n\n\t\t\t'context': {}\n\t\t}\n\n\t# create_order_pro\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Order  ------------------------------------------------------\n#jz\n\n\n\t@api.multi \n\t#def create_order(self):\n\tdef create_order(self, target):\n\n\t\t#print \n\t\t#print 'jx'\n\t\t#print 'Create Order'\n\t\t#print self.x_family\n\t\t#print target\n\n\n\n\t\t#note = 'test'\n\t\t#note = self.partner_id.name \n\t\tnote = self.partner_id.comment\n\n\n\n\t\t# Doctor \n\t\tdoctor_id = treatment_funcs.get_actual_doctor(self)\n\n\t\tif doctor_id == False: \n\t\t\tdoctor_id = self.physician.id \n\n\n\n\t\t# Create Order \n\t\torder = self.env['sale.order'].create(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'treatment': self.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'partner_id': self.partner_id.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'patient': self.patient.id,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'state':'draft',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'x_family': target, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'note': note, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#'consultation':self.id,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#'x_chief_complaint':chief_complaint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#'x_doctor': self.physician.id,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'x_doctor': doctor_id,\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\n\n\t\t# Create order lines \n\t\tif target == 'consultation':\n\t\t\tif self.chief_complaint in ['monalisa_touch']:\n\t\t\t\ttarget_line = 'con_gyn'\n\t\t\telse:\n\t\t\t\ttarget_line = 'con_med'\n\n\n\n\t\t\t\n\t\t\tprice_manual = 0\n\n\t\t\t#print target_line \n\t\t\t#ret = order.x_create_order_lines_target(target_line)\n\t\t\tret = order.x_create_order_lines_target(target_line, price_manual)\n\t\t\t#print ret \n\n\n\n\n\t\t#elif target == 'procedure':\n\t\telse:\n#jxx\n\t\t\torder_id = order.id\n\n\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'quick', order_id)\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'vip', order_id)\n\n\n\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'co2', order_id)\n\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'excilite', order_id)\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'ipl', order_id)\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'ndyag', order_id)\n\n\t\t\tret = treatment_funcs.create_order_lines(self, 'medical', order_id)\n\n\n\n\n\t\t#print \n\n\t\treturn order\n\t# create_order\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Budget  ------------------------------------------------------\n\n\t@api.multi \n\tdef create_budget(self):\n\n\t\t#print 'jx'\n\t\t#print 'Create Budget'\n\n\n\t\tconsultation = self.env['openhealth.consultation'].search([('treatment','=', self.id)]) \n\t\tconsultation_id = consultation.id\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.consultation',\n\t\t\t'res_id': consultation_id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t},\t\t\t\n\n\n\t\t\t#'context':   {\n\t\t\t#\t'search_default_treatment': treatment_id,\n\n\t\t\t#\t'default_patient': patient_id,\n\t\t\t#\t'default_doctor': doctor_id,\n\t\t\t#\t'default_treatment': treatment_id,\t\t\t\t\n\t\t\t#\t'default_evaluation_start_date': evaluation_start_date,\n\t\t\t#\t'default_chief_complaint': chief_complaint,\n\t\t\t#\t'default_appointment': appointment_id,\n\t\t\t#}\n\t\t}\n\n\n\t# create_budget \n\n\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Button - Create New Procedure ------------------------------------------------------\n\n\t@api.multi\n\tdef create_new_procedure(self):\n\n\t\tprint \n\t\tprint 'jx'\n\t\tprint 'Create New Procedure'\n\n\n\t\t#if self.nr_invoices_pro > 0:\n\t\t#\tret = treatment_funcs.create_procedure_go(self)\n\n\n\t\tpatient_id = self.patient.id\n\t\tdoctor_id = self.physician.id\n\t\ttreatment_id = self.id \n\t\tchief_complaint = self.chief_complaint\n\t\tevaluation_start_date = self.start_date\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Procedure Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.procedure',\n\t\t\t#'res_id': order.id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\n\t\t\t'view_mode': 'form',\n\n\t\t\t'target': 'current',\n\n\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False, \n\n\t\t\t'flags': {\n\t\t\t\t\t\t#'form': {'action_buttons': True, }\n\t\t\t\t\t\t'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t},\t\t\t\n\n\n\t\t\t'context': {\n\n\t\t\t\t\t\t'default_patient': patient_id,\n\t\t\t\t\t\t'default_doctor': doctor_id,\n\t\t\t\t\t\t'default_treatment': treatment_id,\t\t\t\t\n\t\t\t\t\t\t'default_chief_complaint': chief_complaint,\n\n\n\t\t\t\t\t\t'default_evaluation_start_date': evaluation_start_date,\n\t\t\t\t}\n\t\t}\n\n\t# create_new_procedure \n\n\n\n\n\n# ----------------------------------------------------------- Button - Create Procedure ------------------------------------------------------\n\n\t@api.multi\n\tdef create_procedure(self):\n\n\t\t#print \n\t\t#print \n\t\t#print 'Create Procedure'\n\n\n\t\t#if self.nr_invoices > 0:\n\t\tif self.nr_invoices_pro > 0:\n\n\t\t\tret = treatment_funcs.create_procedure_go(self)\n\n\n\t\t#print ret \n\t\t#print \n\t\t#print \n\n\t# create_procedure \n\n\n\n\n\n\n# ----------------------------------------------------------- Create Sessions ------------------------------------------------------\n\n\t@api.multi \n\tdef create_sessions(self):\n\n\t\t#print 'jx'\n\t\t#print 'Create Sessions'\n\n\n\t\tprocedure = self.env['openhealth.procedure'].search([('treatment','=', self.id)]) \n\t\tprocedure_id = procedure.id\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Procedure Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.procedure',\n\t\t\t'res_id': procedure_id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\n\t\t\t#'target': 'new',\n\t\t\t'target': 'current',\n\n\t\t\t'context':   {\n\t\t\t}\n\t\t}\n\n\t# create_session\n\n\n\n\n\n# ----------------------------------------------------------- Create Controls  ------------------------------------------------------\n\n\t@api.multi \n\tdef create_controls(self):\n\n\t\t#print 'jx'\n\t\t#print 'Create Controls'\n\n\n\t\tprocedure = self.env['openhealth.procedure'].search([('treatment','=', self.id)]) \n\t\tprocedure_id = procedure.id\n\n\n\t\treturn {\n\n\t\t\t# Mandatory \n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Procedure Current',\n\n\n\t\t\t# Window action \n\t\t\t'res_model': 'openhealth.procedure',\n\t\t\t'res_id': procedure_id,\n\n\n\t\t\t# Views \n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\n\t\t\t#'target': 'new',\n\t\t\t'target': 'current',\n\n\t\t\t'context':   {\n\t\t\t}\n\t\t}\n\n\n\t# create_controls\n\n\n\n\n\n\n# ----------------------------------------------------------- CRUD ------------------------------------------------------\n\n\n\t@api.multi\n\tdef write(self,vals):\n\n\t\t#print \n\t\t#print 'CRUD - Treatment - Write'\n\t\t#print \n\t\t#print vals\n\n\n\t\t#Write your logic here\n\t\tres = super(Treatment, self).write(vals)\n\t\t#Write your logic here\n\n\n\n\n\n\n\n\t\t#print 'patient', self.patient.name\n\t\t#print 'physicien', self.physician.name \n\n\n\t\tapp_c = self.env['oeh.medical.appointment'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient', '=', self.patient.name), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_type', '=', 'consultation'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('doctor', '=', self.physician.name), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\torder='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\tapp_p = self.env['oeh.medical.appointment'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient', '=', self.patient.name), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_type', '=', 'procedure'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('doctor', '=', self.physician.name), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\torder='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t#print 'Treatment id', self.id\n\n\n\n\t\t#print app_c \n\t\tif app_c.id != False:\n\t\t\tif app_c.treatment.name == False: \n\t\n\t\t\t\tapp_c.treatment = self.id \n\t\t\t\t\n\t\t\t\t#print 'c id', app_c.id\n\t\t\t\t#print 'treatment', app_c.treatment \n\n\n\n\t\t#print app_p \n\t\tif app_p.id != False:\n\t\t\tif app_p.treatment.name == False: \n\t\t\t\n\t\t\t\tapp_p.treatment = self.id \n\t\t\t\t\n\t\t\t\t#print 'p id', app_p.id\n\t\t\t\t#print 'treatment', app_p.treatment \n\n\n\n\t\treturn res\n\t# CRUD \n\n\n",
			"file": "models/treatment.py",
			"file_size": 43313,
			"file_write_time": 131611984950000000,
			"settings":
			{
				"buffer_size": 43334,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/treatment_vars.py",
			"settings":
			{
				"buffer_size": 1469,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/treatments/treatment_orders.xml",
			"settings":
			{
				"buffer_size": 2563,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/order.py",
			"settings":
			{
				"buffer_size": 46722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/ord_vars.py",
			"settings":
			{
				"buffer_size": 2851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/treatments/treatment.xml",
			"settings":
			{
				"buffer_size": 18222,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/orders/order.xml",
			"settings":
			{
				"buffer_size": 22710,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/menus/menus_reporting.xml",
			"settings":
			{
				"buffer_size": 619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/reports/report_sale_months.xml",
			"settings":
			{
				"buffer_size": 10386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/reports/report_sale_search.xml",
			"settings":
			{
				"buffer_size": 5178,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "data/base_data_categs_prods.xml",
			"settings":
			{
				"buffer_size": 2340,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/sale_report.py",
			"settings":
			{
				"buffer_size": 4906,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/orders/sale_order.xml",
			"settings":
			{
				"buffer_size": 545,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/reports/report_sale.xml",
			"settings":
			{
				"buffer_size": 4003,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/menus/menus.xml",
			"settings":
			{
				"buffer_size": 10950,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/products/product.xml",
			"settings":
			{
				"buffer_size": 21478,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "reports/report_ticket_receipt.xml",
			"settings":
			{
				"buffer_size": 5260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/partner.py",
			"settings":
			{
				"buffer_size": 8362,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/partners/partner.xml",
			"settings":
			{
				"buffer_size": 9220,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/payment_method.py",
			"settings":
			{
				"buffer_size": 14843,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/patient.py",
			"settings":
			{
				"buffer_size": 31241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/kardex/kardex.xml",
			"settings":
			{
				"buffer_size": 2448,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/stock_picking.py",
			"settings":
			{
				"buffer_size": 1766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "reports/report_purchasequotation.xml",
			"settings":
			{
				"buffer_size": 6720,
				"line_ending": "Unix"
			}
		},
		{
			"file": "reports/report_purchasequotation_template.xml",
			"settings":
			{
				"buffer_size": 2206,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/kardex.py",
			"settings":
			{
				"buffer_size": 3767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/kardex_move.py",
			"settings":
			{
				"buffer_size": 2717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/stock/stock_move.xml",
			"settings":
			{
				"buffer_size": 3583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/stock/stock_picking.xml",
			"settings":
			{
				"buffer_size": 7126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/stock/stock.xml",
			"settings":
			{
				"buffer_size": 1865,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/stock_move_selector.py",
			"settings":
			{
				"buffer_size": 2434,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/stock/stock_move_selector.xml",
			"settings":
			{
				"buffer_size": 3438,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/patients/patient.xml",
			"settings":
			{
				"buffer_size": 12047,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/menus/menus_inventory.xml",
			"settings":
			{
				"buffer_size": 4172,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pa",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"browser",
				"Browse Mode: Right Sidebar"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"python",
				"Build With: Python - Syntax Check"
			],
			[
				"package control:install",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 256.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gibil/cellar/github/openhealth/models/__init__.py",
		"/Users/gibil/cellar/github/openhealth/models/stock_picking.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/readme.txt",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_report.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_reporting.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/security/ir.model.access.csv",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_reporting_pla.xml",
		"/Users/gibil/cellar/github/openhealth/views/base.xml",
		"/Users/gibil/cellar/github/openhealth/models/consultation.py",
		"/Users/gibil/cellar/github/openhealth/models/evaluation.py",
		"/Users/gibil/cellar/github/openhealth/views/consultations/consultation.xml",
		"/Users/gibil/cellar/github/openhealth/models/procedure.py",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus.xml",
		"/Users/gibil/cellar/github/openhealth/views/partners/partner.xml",
		"/Users/gibil/cellar/github/openhealth/models/procedure_funcs.py",
		"/Users/gibil/cellar/github/openhealth/models/treatment.py",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_openhealth.xml",
		"/Users/gibil/cellar/github/openhealth/models/kardex_move.py",
		"/Users/gibil/cellar/github/openhealth/views/kardex/kardex.xml",
		"/Users/gibil/cellar/github/openhealth/models/kardex.py",
		"/Users/gibil/cellar/github/openhealth/views/stock/stock_move_selector.xml",
		"/Users/gibil/cellar/github/openhealth/models/stock_move_selector.py",
		"/Users/gibil/cellar/github/openhealth/views/purchase/purchase.xml",
		"/Users/gibil/cellar/github/openhealth/models/account_invoice.py",
		"/Users/gibil/cellar/github/openhealth/models/account_invoice_line.py",
		"/Users/gibil/cellar/github/openhealth/views/stock/stock_move.xml",
		"/Users/gibil/cellar/github/openhealth/models/order_line.py",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment.xml",
		"/Users/gibil/cellar/github/openhealth/models/treatment_funcs.py",
		"/Users/gibil/cellar/github/openhealth/reports/paper_format.xml",
		"/Users/gibil/cellar/github/openhealth/reports/report_purchasequotation.xml",
		"/Users/gibil/cellar/github/openhealth/models/stock_picking.py",
		"/Users/gibil/cellar/github/openhealth/models/purchase.py",
		"/Users/gibil/cellar/github/openhealth/models/purchase_order_line.py",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security.xml",
		"/Users/gibil/cellar/github/openhealth/views/stock/stock.xml",
		"/Users/gibil/cellar/github/openhealth/views/stock/stock_picking.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_inventory.xml",
		"/Users/gibil/cellar/github/openhealth/models/service_co2.py",
		"/Users/gibil/cellar/github/openhealth/models/product.py",
		"/Users/gibil/cellar/github/openhealth/models/stock_move.py",
		"/Users/gibil/cellar/github/openhealth/models/patient.py",
		"/Users/gibil/cellar/github/openhealth/views/orders/order.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_quick.xml",
		"/Users/gibil/cellar/github/openhealth/models/stock_move_selector.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_sales.xml",
		"/Users/gibil/cellar/github/openhealth/models/order.py",
		"/Users/gibil/cellar/github/openhealth/models/appointment.py",
		"/Users/gibil/cellar/github/openhealth/models/order_report.py",
		"/Users/gibil/cellar/github/openhealth/data/stock_move_data.xml",
		"/Users/gibil/cellar/github/openhealth/models/partner.py",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment_procedures.xml",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment_services.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_line.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/security/ir.model.access.BUF.csv",
		"/Users/gibil/cellar/github/openhealth/views/order_report.xml",
		"/Users/gibil/cellar/github/openhealth/models/procedure_funcs.pyc",
		"/Users/gibil/cellar/github/openhealth/views/orders/order.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_personal.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient.xml",
		"/Users/gibil/cellar/github/openhealth/models/service.py",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus.BUFF.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/events.xml",
		"/Users/gibil/cellar/github/openhealth/models/order_line_report.py",
		"/Users/gibil/cellar/github/openhealth/models/counter.py",
		"/Users/gibil/cellar/github/openhealth/views/products/product.xml",
		"/Users/gibil/cellar/github/openhealth/views/counters/counter.xml",
		"/Users/gibil/cellar/github/openhealth/views/appointments/appointment.xml",
		"/Users/gibil/cellar/github/openhealth/models/ord_vars.py",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_cosmetologies.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_treatments.xml",
		"/Users/gibil/cellar/github/openhealth/models/buffer.py",
		"/Users/gibil/cellar/github/openhealth/models/sale_report.py",
		"/Users/gibil/cellar/github/openhealth/models/physician.py",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_products_new.xml",
		"/Users/gibil/cellar/github/openhealth/models/payment_method_line.py",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/payment_methods.xml",
		"/Users/gibil/cellar/github/openhealth/models/payment_method.py",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/payment_method_line.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_reporting.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_appointments.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/buffer.xml",
		"/Users/gibil/cellar/github/openhealth/models/order.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/payment_method.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/howto/shell.rb",
		"/Users/gibil/cellar/github/openhealth/models/partner.TRAHS.py",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_control_docs.xml",
		"/Users/gibil/cellar/github/openhealth/reports/report_ticket_receipt.xml",
		"/Users/gibil/cellar/github/openhealth/models/sale_proof.py",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_products.xml",
		"/Users/gibil/cellar/github/openhealth/models/service_vip.py",
		"/Users/gibil/cellar/github/openhealth/views/services/service_quick.xml",
		"/Users/gibil/cellar/github/openhealth/models/recommendation.py",
		"/Users/gibil/cellar/github/openhealth/views/recommendations/recommendation.xml",
		"/Users/gibil/cellar/github/openhealth/views/services/service_vip.xml",
		"/Users/gibil/cellar/github/openhealth/views/services/service.xml",
		"/Users/gibil/cellar/github/openhealth/models/sale_note.py",
		"/Users/gibil/cellar/github/openhealth/models/advertisement.py",
		"/Users/gibil/cellar/github/openhealth/models/invoice.py",
		"/Users/gibil/cellar/github/openhealth/models/receipt.py",
		"/Users/gibil/cellar/github/openhealth/models/ticket_invoice.py",
		"/Users/gibil/cellar/github/openhealth/models/ticket_receipt.py",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/ticket_invoices.xml",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/ticket_receipts.xml",
		"/Users/gibil/cellar/github/openhealth/reports/report_ticket_invoice.xml",
		"/Users/gibil/cellar/github/openhealth/models/service_quick.py",
		"/Users/gibil/cellar/github/openhealth/views/orders/payment_methods.xml",
		"/Users/gibil/cellar/github/openhealth/models/app_vars.py",
		"/Users/gibil/cellar/github/openhealth/views/closings/closings.xml",
		"/Users/gibil/cellar/github/openhealth/models/closing.py",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_staff.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_new_products.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_platform.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_managers.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_almacen.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_inactive.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_doctors.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_cash.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_assistants.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security_readers.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/pwds.xml",
		"/Users/gibil/cellar/github/openhealth/data/pricelist_quick.xml",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/receipts.xml",
		"/Users/gibil/cellar/github/openhealth/views/sale_documents/sale_documents.xml",
		"/Users/gibil/cellar/github/openhealth/views/procedures/procedure.xml",
		"/Users/gibil/cellar/github/openhealth/views/procedures/procedure_controls.xml"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"order_pro_ids ",
			"anular",
			"state",
			"cremas",
			"product_id",
			"product_id = ",
			"product_id",
			"x_doctor",
			"separator",
			"categ_id",
			"report",
			"patient",
			"treatment",
			"des",
			"phone",
			"phon",
			"email",
			"street",
			"location",
			"report_purchase",
			"validate",
			"confirmar",
			"location",
			"button",
			"kardex",
			"report_",
			"report_purcha",
			"treatment",
			"doctor = fi",
			"doctor",
			"caja",
			"treatment",
			"pricelist_id",
			"treatment",
			"get_actual_doctor",
			"create_procedure",
			"x_create_order_lines_target",
			"x_create_order_lines",
			"action_picking",
			"operations",
			"discount",
			"order_line",
			"purchase.xml",
			"enviar",
			"valuation",
			"menu_warehouse_report",
			"date",
			"configuration",
			"get_precision",
			"dp.",
			"stock_picking",
			"kardex",
			"coeff",
			"patient",
			"compu",
			"calcu",
			"line",
			"order",
			"order_report",
			"stock",
			"stock_move_selector",
			"stock.move.selector",
			"domain",
			"create_",
			"menuitem",
			"kardex",
			"stock",
			"x_date",
			"order_repo",
			"create_control",
			"create_procedure",
			"treatment_func",
			"create_consultation",
			"reset",
			"order_report",
			"list",
			"notebook",
			"compute",
			"create_",
			"create",
			"order.xml",
			"page",
			"anulaciones",
			"page",
			"amount_total",
			"page",
			"order_id",
			"#",
			"x_type",
			"order.xml",
			"order",
			"update_order",
			"order = fields",
			".create",
			"order",
			"line",
			"#",
			"record",
			"x_state",
			"partner",
			"patient",
			"x_order_ids",
			"patient_id",
			"patient",
			"sale.order",
			"treatment",
			"x_doctor",
			"context",
			"x_doctor",
			"context",
			"caja",
			"prefix",
			"reporting",
			"user_id",
			"date_order",
			"patient",
			"x_machine",
			"record",
			"state",
			"state =",
			"balance",
			"ids",
			"append",
			"saledoc",
			"total ",
			"confirm",
			"create_",
			"x_ruc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"location_source",
			"location_sou",
			"price_subtotal",
			"kardex_move",
			"name",
			"qty",
			"coeff",
			"move",
			"kardex",
			"openhealth_kardex",
			"openhealth.kardex",
			"",
			"self",
			"sale",
			"separator",
			"self",
			"partner_dni",
			"sale_note",
			"advertisement",
			"receipt",
			"vip",
			"vip_inprog",
			"lache",
			"lisette ache",
			"manual",
			"",
			"':",
			"",
			"cinthya",
			"ramirez",
			"total",
			"",
			"quick",
			"pathology",
			"physician",
			"level",
			"pathology",
			"quick",
			"product",
			"quick",
			"std",
			"record",
			"price_unit",
			"price_subtotal",
			"price_vip_return",
			"price_vip",
			"comeback",
			"patient",
			"test",
			"applied",
			"",
			"neck_hands",
			"neck",
			"face_all_neck",
			"face_all_hands",
			"face_all",
			"cheekbones",
			"neck_hands",
			"neck",
			"face_all_neck",
			"face_all_hands",
			"face_all",
			"cheekbones",
			"neck",
			"face_all_neck",
			"face_all_hands",
			"face_all",
			"cheekbones",
			"neck_hands",
			"vip_return",
			"quick",
			"face_local",
			"body_local",
			"name",
			"neck",
			"face_all_neck",
			"face_all_hands",
			"face_all",
			"cheekbones",
			"face",
			"comeback",
			"",
			"patient",
			"zone",
			"pathology",
			"quick",
			"'",
			"zone",
			"openhealth",
			"pathology",
			"level",
			"pathology",
			"wart",
			"tatoo",
			"stains",
			"scar",
			"rejuvenation",
			"mole",
			"keratosis",
			"cyst",
			"pathology",
			"",
			"co2",
			"service",
			"quick",
			"Quick",
			"quick",
			"x_ruc",
			"tatoo",
			"quick",
			"medical",
			"ndyag",
			"ipl",
			"excilite",
			"control",
			"evaluation_start_date",
			"cos",
			"archivers",
			"archivo",
			"today_date",
			"end_date",
			"x_nr_cosmetologies",
			"count",
			"default_address_id",
			"",
			"almacen",
			"self",
			"doctor_uid"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "__openerp__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10233,
						"regions":
						{
						},
						"selection":
						[
							[
								57,
								57
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "models/treatment.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43334,
						"regions":
						{
						},
						"selection":
						[
							[
								22853,
								22853
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 23742.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "models/treatment_vars.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1469,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1143.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "views/treatments/treatment_orders.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2563,
						"regions":
						{
						},
						"selection":
						[
							[
								1356,
								1356
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 822.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "models/order.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46722,
						"regions":
						{
						},
						"selection":
						[
							[
								10595,
								10595
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11392.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "models/ord_vars.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2851,
						"regions":
						{
						},
						"selection":
						[
							[
								220,
								220
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "views/treatments/treatment.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18222,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "views/orders/order.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22710,
						"regions":
						{
						},
						"selection":
						[
							[
								14361,
								14361
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 14718.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "views/menus/menus_reporting.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 619,
						"regions":
						{
						},
						"selection":
						[
							[
								247,
								247
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 171.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "views/reports/report_sale_months.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10386,
						"regions":
						{
						},
						"selection":
						[
							[
								1579,
								1579
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 798.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "views/reports/report_sale_search.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5178,
						"regions":
						{
						},
						"selection":
						[
							[
								2380,
								2380
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1366.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "data/base_data_categs_prods.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2340,
						"regions":
						{
						},
						"selection":
						[
							[
								89,
								89
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1373.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "models/sale_report.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4906,
						"regions":
						{
						},
						"selection":
						[
							[
								4299,
								4309
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1350.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "views/orders/sale_order.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 545,
						"regions":
						{
						},
						"selection":
						[
							[
								143,
								143
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "views/reports/report_sale.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4003,
						"regions":
						{
						},
						"selection":
						[
							[
								279,
								279
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 112.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "views/menus/menus.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10950,
						"regions":
						{
						},
						"selection":
						[
							[
								7681,
								7683
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "views/products/product.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21478,
						"regions":
						{
						},
						"selection":
						[
							[
								3283,
								3283
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "reports/report_ticket_receipt.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5260,
						"regions":
						{
						},
						"selection":
						[
							[
								3191,
								3191
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4211.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "models/partner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8362,
						"regions":
						{
						},
						"selection":
						[
							[
								2335,
								2335
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3332.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "views/partners/partner.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9220,
						"regions":
						{
						},
						"selection":
						[
							[
								3600,
								3600
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "models/payment_method.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14843,
						"regions":
						{
						},
						"selection":
						[
							[
								3135,
								3135
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3789.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "models/patient.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31241,
						"regions":
						{
						},
						"selection":
						[
							[
								210,
								210
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 286.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "views/kardex/kardex.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2448,
						"regions":
						{
						},
						"selection":
						[
							[
								1167,
								1167
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 902.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "models/stock_picking.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1766,
						"regions":
						{
						},
						"selection":
						[
							[
								269,
								269
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 48.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "reports/report_purchasequotation.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6720,
						"regions":
						{
						},
						"selection":
						[
							[
								133,
								133
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "reports/report_purchasequotation_template.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2206,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "models/kardex.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3767,
						"regions":
						{
						},
						"selection":
						[
							[
								477,
								477
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "models/kardex_move.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2717,
						"regions":
						{
						},
						"selection":
						[
							[
								1629,
								1629
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1485.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "views/stock/stock_move.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3583,
						"regions":
						{
						},
						"selection":
						[
							[
								1439,
								1439
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 974.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "views/stock/stock_picking.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7126,
						"regions":
						{
						},
						"selection":
						[
							[
								3319,
								4184
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3455.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "views/stock/stock.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1865,
						"regions":
						{
						},
						"selection":
						[
							[
								408,
								408
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "models/stock_move_selector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2434,
						"regions":
						{
						},
						"selection":
						[
							[
								156,
								156
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1426.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "views/stock/stock_move_selector.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3438,
						"regions":
						{
						},
						"selection":
						[
							[
								1053,
								1053
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "views/patients/patient.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12047,
						"regions":
						{
						},
						"selection":
						[
							[
								1960,
								2036
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1731.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "views/menus/menus_inventory.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4172,
						"regions":
						{
						},
						"selection":
						[
							[
								805,
								805
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 488.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 30.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "OpenHealth-MIN.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"s",
				"~/cellar/github/openhealth/models/stock_picking.py"
			],
			[
				"o",
				"~/cellar/github/openhealth/views/orders/order.xml"
			],
			[
				"m",
				"~/cellar/github/openhealth/views/menus/menus_inventory.xml"
			],
			[
				"t",
				"~/cellar/github/openhealth/models/treatment.py"
			],
			[
				"c",
				"~/cellar/github/openhealth/views/counters/counter.xml"
			],
			[
				"tick",
				"~/cellar/github/openhealth/views/sale_documents/ticket_receipts.xml"
			],
			[
				"sa",
				"~/cellar/github/openhealth/models/sale_proof.py"
			],
			[
				"p",
				"~/cellar/github/openhealth/views/patients/patient.xml"
			],
			[
				"pro",
				"~/cellar/github/openhealth/views/products/product.xml"
			],
			[
				"d",
				"~/cellar/github/openhealth/data/prods/data_zones.xml"
			],
			[
				"z",
				"~/cellar/github/openhealth/models/zone.py"
			],
			[
				"",
				"~/cellar/github/openhealth/models/service.py"
			],
			[
				"b",
				"~/cellar/github/openhealth/views/base.xml"
			],
			[
				"a",
				"~/cellar/github/openhealth/models/appointment.py"
			],
			[
				"sec",
				"~/cellar/github/openhealth/security/openhealth_security.xml"
			],
			[
				"r",
				"~/cellar/github/openhealth/models/receipt.py"
			],
			[
				"i",
				"~/cellar/github/openhealth/security/ir.model.access.csv"
			],
			[
				"h",
				"~/cellar/github/openhealth/models/howto/shell.rb"
			],
			[
				"e",
				"~/cellar/github/openhealth/models/evaluation.py"
			],
			[
				"_",
				"~/cellar/github/openhealth/__openerp__.py"
			],
			[
				"invoi",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/invoice.py"
			],
			[
				"pr",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/sale_proof.py"
			],
			[
				"re",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/views/sale_documents/receipts.xml"
			],
			[
				"service_ndy",
				"views/services/service_ndyag.xml"
			],
			[
				"service_ip",
				"views/services/service_ipl.xml"
			],
			[
				"service",
				"views/services/service_excilite.xml"
			],
			[
				"order",
				"views/orders/order.xml"
			],
			[
				"control",
				"views/controls/control.xml"
			],
			[
				"consult",
				"views/consultations/consultation.xml"
			],
			[
				"procedure",
				"views/procedures/procedure.xml"
			],
			[
				"ser",
				"views/services/service_co2.xml"
			],
			[
				"trea",
				"views/treatments/treatment.xml"
			],
			[
				"patient",
				"views/patients/patient.xml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Virtualenvs/Odoo9-min/odoo/addons/sale/SaleOrder.sublime-project"
			],
			[
				"\t",
				"~/Documents/Aptana Studio 3 Workspace/ccdata/ccData.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
